{
    "docs": [
        {
            "location": "/", 
            "text": "FeigenbaumUtil.jl\n\n\nDocumentation for FeigenbaumUtil.jl. The documentation is split into three parts: \nFeigenbaumCore\n, \nFeigenbaumParam\n, \nFeigenbaumUtilGraphics\n, and \nFeigenbaumSecondMinimal\n. The function descriptions should be sufficient for documentation.\n\n\n\n\nFeigenbaumCore\n\n\n#\n\n\nFeigenbaumUtil.selectmap\n \n \nFunction\n.\n\n\nselectmap(func)\n\n\n\n\nReturns function, centered function, maxloc for unimodal maps Log, Sine, Cubic, and Quartic\n\n\nExamples\n\n\nf,fc,maxloc = selectmap(\nLog\n)\n\n\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.iterateF\n \n \nFunction\n.\n\n\niterateF(f,ites,lam,x)\n\n\n\n\nProduce a list of [f(x0, lam), f(f(x0, lam), lam), ...] with up to \nites\n compositions.\n\n\nsource\n\n\niterateF(f,ites,lam,x)\n\n\n\n\nReturn list $f^{ites}(x; lam)$ where $x = [x_1 x_2 ... x_n]$\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.iterateF!\n \n \nFunction\n.\n\n\niterateF!(f,ites,lam,x)\n\n\n\n\nReturn list $f^{ites}(x; lam)$ where $x = [x_1 x_2 ... x_n]$, in place\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.nestF\n \n \nFunction\n.\n\n\nnestF(f,ites,lam,x)\n\n\n\n\nReturn $f^{ites}(x; lam)$\n\n\nsource\n\n\nnestF(f,ites,k,lam,x)\n\n\n\n\nReturn $f^{(2^ites)*k}(x; lam)$ as a list\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.nestF!\n \n \nFunction\n.\n\n\nnestF!(f,ites,k,lam,x)\n\n\n\n\nReturn $f^{(2^ites)*k}(x; lam)$ as a list, in place\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.getCyclicPermFromLambda\n \n \nFunction\n.\n\n\ngetCyclicPermFromLambda(f,period,lam,x0)\n\n\n\n\nGiven a map and parameter value corresponding to a cycle of period 'period' returns the associated cyclic permutation\n\n\nExample\n\n\njulia\n f,fc,maxloc = selectmap(\nLog\n);\njulia\n getCyclicPermFromLambda(f,3, 0.9579685138208287, maxloc)\n[2 3 1]\n\n\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.findinverse\n \n \nFunction\n.\n\n\nfindinverse(perm)\n\n\n\n\nReturn inverse permutation of perm. That is, if $\u03c0 = [n n-1 n-2 \u2026 2 1]$, \nfindinverse\n returns $\u03c0(perm(\u03c0))$\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.findDistanceReg\n \n \nFunction\n.\n\n\nfindDistanceReg(fun, maxloc, l, ites, k)\n\n\n\n\nReturns distance between superstable fixed point, maxloc, and the closest element of periodic orbit of function fun with period $(2^{ites})*k$ at parameter $lam$\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.findBoundsUnivX\n \n \nFunction\n.\n\n\nfindBoundsUnivX(f, maxloc, lambda, k, ites)\n\n\n\n\nCalculate the bottom left and right x coords of a bounding box containing a stable 2-cycle and the portions of \"f\" that generate it thereby demonstrating the period doubling mechanism for f\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.hasperiodn\n \n \nFunction\n.\n\n\nhasperiodn(perm, n)\n\n\n\n\nReturn true if permutation perm has subgraph of period n\n\n\nExample\n\n\n hasperiodn([4 5 7 6 3 2 1], 5)\n\n\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.hasclosedcycle\n \n \nFunction\n.\n\n\nhasclosedcycle(perm, cycle)\n\n\n\n\nReturn true if permutation perm contains disjoint permutation of order cycle\n\n\nExample\n\n\nhasclosedcycle([3 5 4 6 7 1 2], 3)\n\n\n\n\nsource\n\n\n\n\nFeigenbaumParam\n\n\n#\n\n\nFeigenbaumUtil.findparams\n \n \nFunction\n.\n\n\nfindparams(fun, maxloc, k, p0, pEnd, epsi, numTrial, limit)\n\n\n\n\nFinds parameter values that generate superstable orbits of given period\n\n\nExamples\n\n\njulia\n f,fc,maxloc= selectmap(\nLog\n);\njulia\n findparams(f, maxloc, 7, 0.78, 1.0, 10.0^-10.0,1000)\n\n\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.getperioddblparams\n \n \nFunction\n.\n\n\ngetperioddblparams(period, appr, func)\n\n\n\n\nExtracts parameter values for period doubling scheme for main parameter store\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.writeparam2tex\n \n \nFunction\n.\n\n\nwriteparam2tex(fn, goBeyond3, outFile, paramFile)\n\n\n\n\nWrite values from param tables to TeX file\n\n\nsource\n\n\n\n\nFeigenbaumUtilGraphics\n\n\n#\n\n\nFeigenbaumUtil.findg1\n \n \nFunction\n.\n\n\nfindg1(period, appr, func, maxParams)\n\n\n\n\nDemonstrate Feigenbaum period doubling by scaling and reflecting the given function at parameter values corresponding to period doublings starting at the given period\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.plotRectangle\n \n \nFunction\n.\n\n\nplotRectangle(x,y,h,w,p,col)\n\n\n\n\nPlots a rectangle with given bottom left corner and height h, width w in plot p\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.plotperioddblmech\n \n \nFunction\n.\n\n\nplotperioddblmech(period,appr,func, param, pltpts)\n\n\n\n\nPlot the period doubling mechanism observeed by Feigenbaum with extension to more general classes\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.plotbifurcationdiagram\n \n \nFunction\n.\n\n\nplotbifurcationdiagram(mp, stlam, enlam, shadest, x0, maxites, showpic)\n\n\n\n\nPlot bifurcation diagram for given map, with parameter start and end ranges and starting point $x_0$\n\n\nsource\n\n\n\n\nFeigenbaumSecondMinimal\n\n\n#\n\n\nFeigenbaumUtil.getsecminfromfile\n \n \nFunction\n.\n\n\ngetsecminfromfile(period)\n\n\n\n\nLoad second minimal periodic orbits from file Limited to periodic orbits: 7,9,11,13\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.checkperminvolution\n \n \nFunction\n.\n\n\ncheckperminvolution(p1,p2,flag)\n\n\n\n\nCheck if 2 permutations have a involutory relationship, that is, if Tp1 = p2 and p1 = Tp2\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.getadjacencymatrixfromlistsp\n \n \nFunction\n.\n\n\ngetadjacencymatrixfromlistsp(adjlist)\n\n\n\n\nReturn sparse adjacency matrix corresponding to adjacency list adjlist\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.getadjacencymatrixfromlist\n \n \nFunction\n.\n\n\ngetadjacencymatrixfromlist(adjlist)\n\n\n\n\nReturn adjacency matrix corresponding to adjacency list adjlist\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.getadjacencymatrixsp\n \n \nFunction\n.\n\n\ngetadjacencymatrixsp(perm)\n\n\n\n\nReturn sparse adjacency matrix corresponding to permutation perm\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.getadjacencylist\n \n \nFunction\n.\n\n\ngetadjacencylist(perm)\n\n\n\n\nReturn adjacency matrix corresponding to permutation perm\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.getadjacencymatrix\n \n \nFunction\n.\n\n\ngetadjacencymatrix(perm)\n\n\n\n\nReturn adjacency matrix corresponding to permutation perm\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.unpacksecminperm\n \n \nFunction\n.\n\n\nunpacksecminperm(permtype)\n\n\n\n\nExpands SecondMinimal into full permutations\n\n\nsource\n\n\nunpacksecminperm(permtype)\n\n\n\n\nWorker function to unpack SecondMinimal permutations into an Array\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.getsecminperms\n \n \nFunction\n.\n\n\ngetsecminperms(period)\n\n\n\n\nGenerate all SecondMinimal permutations of the given odd period\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.generatePermRelations\n \n \nFunction\n.\n\n\ngeneratePermRelations(k, includeInverses)\n\n\n\n\nMainly written to explore the relations between SecondMinimal permutations\n\n\nsource\n\n\n#\n\n\nFeigenbaumUtil.gettopologicalstructure\n \n \nFunction\n.\n\n\ngettopologicalstructure(perm)\n\n\n\n\nTopological structure of a continuous endomorphism from an interval [a,b] to itself is defined as the collection of minimums and maximums taken function on the open interval (a,b)\n\n\nsource\n\n\n\n\nIndex\n\n\n\n\nFeigenbaumUtil.checkperminvolution\n\n\nFeigenbaumUtil.findBoundsUnivX\n\n\nFeigenbaumUtil.findDistanceReg\n\n\nFeigenbaumUtil.findg1\n\n\nFeigenbaumUtil.findinverse\n\n\nFeigenbaumUtil.findparams\n\n\nFeigenbaumUtil.generatePermRelations\n\n\nFeigenbaumUtil.getCyclicPermFromLambda\n\n\nFeigenbaumUtil.getadjacencylist\n\n\nFeigenbaumUtil.getadjacencymatrix\n\n\nFeigenbaumUtil.getadjacencymatrixfromlist\n\n\nFeigenbaumUtil.getadjacencymatrixfromlistsp\n\n\nFeigenbaumUtil.getadjacencymatrixsp\n\n\nFeigenbaumUtil.getperioddblparams\n\n\nFeigenbaumUtil.getsecminfromfile\n\n\nFeigenbaumUtil.getsecminperms\n\n\nFeigenbaumUtil.gettopologicalstructure\n\n\nFeigenbaumUtil.hasclosedcycle\n\n\nFeigenbaumUtil.hasperiodn\n\n\nFeigenbaumUtil.iterateF\n\n\nFeigenbaumUtil.iterateF!\n\n\nFeigenbaumUtil.nestF\n\n\nFeigenbaumUtil.nestF!\n\n\nFeigenbaumUtil.plotRectangle\n\n\nFeigenbaumUtil.plotbifurcationdiagram\n\n\nFeigenbaumUtil.plotperioddblmech\n\n\nFeigenbaumUtil.selectmap\n\n\nFeigenbaumUtil.unpacksecminperm\n\n\nFeigenbaumUtil.writeparam2tex", 
            "title": "Home"
        }, 
        {
            "location": "/#feigenbaumutiljl", 
            "text": "Documentation for FeigenbaumUtil.jl. The documentation is split into three parts:  FeigenbaumCore ,  FeigenbaumParam ,  FeigenbaumUtilGraphics , and  FeigenbaumSecondMinimal . The function descriptions should be sufficient for documentation.", 
            "title": "FeigenbaumUtil.jl"
        }, 
        {
            "location": "/#feigenbaumcore", 
            "text": "#  FeigenbaumUtil.selectmap     Function .  selectmap(func)  Returns function, centered function, maxloc for unimodal maps Log, Sine, Cubic, and Quartic  Examples  f,fc,maxloc = selectmap( Log )  source  #  FeigenbaumUtil.iterateF     Function .  iterateF(f,ites,lam,x)  Produce a list of [f(x0, lam), f(f(x0, lam), lam), ...] with up to  ites  compositions.  source  iterateF(f,ites,lam,x)  Return list $f^{ites}(x; lam)$ where $x = [x_1 x_2 ... x_n]$  source  #  FeigenbaumUtil.iterateF!     Function .  iterateF!(f,ites,lam,x)  Return list $f^{ites}(x; lam)$ where $x = [x_1 x_2 ... x_n]$, in place  source  #  FeigenbaumUtil.nestF     Function .  nestF(f,ites,lam,x)  Return $f^{ites}(x; lam)$  source  nestF(f,ites,k,lam,x)  Return $f^{(2^ites)*k}(x; lam)$ as a list  source  #  FeigenbaumUtil.nestF!     Function .  nestF!(f,ites,k,lam,x)  Return $f^{(2^ites)*k}(x; lam)$ as a list, in place  source  #  FeigenbaumUtil.getCyclicPermFromLambda     Function .  getCyclicPermFromLambda(f,period,lam,x0)  Given a map and parameter value corresponding to a cycle of period 'period' returns the associated cyclic permutation  Example  julia  f,fc,maxloc = selectmap( Log );\njulia  getCyclicPermFromLambda(f,3, 0.9579685138208287, maxloc)\n[2 3 1]  source  #  FeigenbaumUtil.findinverse     Function .  findinverse(perm)  Return inverse permutation of perm. That is, if $\u03c0 = [n n-1 n-2 \u2026 2 1]$,  findinverse  returns $\u03c0(perm(\u03c0))$  source  #  FeigenbaumUtil.findDistanceReg     Function .  findDistanceReg(fun, maxloc, l, ites, k)  Returns distance between superstable fixed point, maxloc, and the closest element of periodic orbit of function fun with period $(2^{ites})*k$ at parameter $lam$  source  #  FeigenbaumUtil.findBoundsUnivX     Function .  findBoundsUnivX(f, maxloc, lambda, k, ites)  Calculate the bottom left and right x coords of a bounding box containing a stable 2-cycle and the portions of \"f\" that generate it thereby demonstrating the period doubling mechanism for f  source  #  FeigenbaumUtil.hasperiodn     Function .  hasperiodn(perm, n)  Return true if permutation perm has subgraph of period n  Example   hasperiodn([4 5 7 6 3 2 1], 5)  source  #  FeigenbaumUtil.hasclosedcycle     Function .  hasclosedcycle(perm, cycle)  Return true if permutation perm contains disjoint permutation of order cycle  Example  hasclosedcycle([3 5 4 6 7 1 2], 3)  source", 
            "title": "FeigenbaumCore"
        }, 
        {
            "location": "/#feigenbaumparam", 
            "text": "#  FeigenbaumUtil.findparams     Function .  findparams(fun, maxloc, k, p0, pEnd, epsi, numTrial, limit)  Finds parameter values that generate superstable orbits of given period  Examples  julia  f,fc,maxloc= selectmap( Log );\njulia  findparams(f, maxloc, 7, 0.78, 1.0, 10.0^-10.0,1000)  source  #  FeigenbaumUtil.getperioddblparams     Function .  getperioddblparams(period, appr, func)  Extracts parameter values for period doubling scheme for main parameter store  source  #  FeigenbaumUtil.writeparam2tex     Function .  writeparam2tex(fn, goBeyond3, outFile, paramFile)  Write values from param tables to TeX file  source", 
            "title": "FeigenbaumParam"
        }, 
        {
            "location": "/#feigenbaumutilgraphics", 
            "text": "#  FeigenbaumUtil.findg1     Function .  findg1(period, appr, func, maxParams)  Demonstrate Feigenbaum period doubling by scaling and reflecting the given function at parameter values corresponding to period doublings starting at the given period  source  #  FeigenbaumUtil.plotRectangle     Function .  plotRectangle(x,y,h,w,p,col)  Plots a rectangle with given bottom left corner and height h, width w in plot p  source  #  FeigenbaumUtil.plotperioddblmech     Function .  plotperioddblmech(period,appr,func, param, pltpts)  Plot the period doubling mechanism observeed by Feigenbaum with extension to more general classes  source  #  FeigenbaumUtil.plotbifurcationdiagram     Function .  plotbifurcationdiagram(mp, stlam, enlam, shadest, x0, maxites, showpic)  Plot bifurcation diagram for given map, with parameter start and end ranges and starting point $x_0$  source", 
            "title": "FeigenbaumUtilGraphics"
        }, 
        {
            "location": "/#feigenbaumsecondminimal", 
            "text": "#  FeigenbaumUtil.getsecminfromfile     Function .  getsecminfromfile(period)  Load second minimal periodic orbits from file Limited to periodic orbits: 7,9,11,13  source  #  FeigenbaumUtil.checkperminvolution     Function .  checkperminvolution(p1,p2,flag)  Check if 2 permutations have a involutory relationship, that is, if Tp1 = p2 and p1 = Tp2  source  #  FeigenbaumUtil.getadjacencymatrixfromlistsp     Function .  getadjacencymatrixfromlistsp(adjlist)  Return sparse adjacency matrix corresponding to adjacency list adjlist  source  #  FeigenbaumUtil.getadjacencymatrixfromlist     Function .  getadjacencymatrixfromlist(adjlist)  Return adjacency matrix corresponding to adjacency list adjlist  source  #  FeigenbaumUtil.getadjacencymatrixsp     Function .  getadjacencymatrixsp(perm)  Return sparse adjacency matrix corresponding to permutation perm  source  #  FeigenbaumUtil.getadjacencylist     Function .  getadjacencylist(perm)  Return adjacency matrix corresponding to permutation perm  source  #  FeigenbaumUtil.getadjacencymatrix     Function .  getadjacencymatrix(perm)  Return adjacency matrix corresponding to permutation perm  source  #  FeigenbaumUtil.unpacksecminperm     Function .  unpacksecminperm(permtype)  Expands SecondMinimal into full permutations  source  unpacksecminperm(permtype)  Worker function to unpack SecondMinimal permutations into an Array  source  #  FeigenbaumUtil.getsecminperms     Function .  getsecminperms(period)  Generate all SecondMinimal permutations of the given odd period  source  #  FeigenbaumUtil.generatePermRelations     Function .  generatePermRelations(k, includeInverses)  Mainly written to explore the relations between SecondMinimal permutations  source  #  FeigenbaumUtil.gettopologicalstructure     Function .  gettopologicalstructure(perm)  Topological structure of a continuous endomorphism from an interval [a,b] to itself is defined as the collection of minimums and maximums taken function on the open interval (a,b)  source", 
            "title": "FeigenbaumSecondMinimal"
        }, 
        {
            "location": "/#index", 
            "text": "FeigenbaumUtil.checkperminvolution  FeigenbaumUtil.findBoundsUnivX  FeigenbaumUtil.findDistanceReg  FeigenbaumUtil.findg1  FeigenbaumUtil.findinverse  FeigenbaumUtil.findparams  FeigenbaumUtil.generatePermRelations  FeigenbaumUtil.getCyclicPermFromLambda  FeigenbaumUtil.getadjacencylist  FeigenbaumUtil.getadjacencymatrix  FeigenbaumUtil.getadjacencymatrixfromlist  FeigenbaumUtil.getadjacencymatrixfromlistsp  FeigenbaumUtil.getadjacencymatrixsp  FeigenbaumUtil.getperioddblparams  FeigenbaumUtil.getsecminfromfile  FeigenbaumUtil.getsecminperms  FeigenbaumUtil.gettopologicalstructure  FeigenbaumUtil.hasclosedcycle  FeigenbaumUtil.hasperiodn  FeigenbaumUtil.iterateF  FeigenbaumUtil.iterateF!  FeigenbaumUtil.nestF  FeigenbaumUtil.nestF!  FeigenbaumUtil.plotRectangle  FeigenbaumUtil.plotbifurcationdiagram  FeigenbaumUtil.plotperioddblmech  FeigenbaumUtil.selectmap  FeigenbaumUtil.unpacksecminperm  FeigenbaumUtil.writeparam2tex", 
            "title": "Index"
        }
    ]
}